#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('collegeify-server:server');
var http = require('http');
var Server = require('socket.io').Server;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


const io = new Server(server, { 
  /* options */
  /*cors: {
      origin: "/"
    }*/
});


io.on("connection", (socket) => {
// ...
console.log(socket.id)


socket.on('message',payload => {
  console.log(payload)
  // io.emit('message',payload)
  io.to(payload.room).emit('message',payload)
})


socket.on('join-room', (payload) => {
  socket.join(payload.room);
  console.log(payload)
  socket.emit('join-room',payload)
  // const payload = {
  //   "data": user+" joined the room :)",
  //   "sender": "Admin",
  //   "time": "11:01 AM",
  //   "date": "14-01-22",
  //   "room": room
  // }
  // console.log(payload)
  // io.to(room).emit('message',payload)
} )

});


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



















































